{"ast":null,"code":"import * as api from '../api';\nexport const askQuestion = (questionData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.postQuestion(questionData);\n    dispatch({\n      type: \"POST_QUESTION\",\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllQuestions = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getAllQuestions();\n    dispatch({\n      type: 'FETCH_ALL_QUESTIONS',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteQuestion = (id, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.deleteQuestion(id);\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postAnswer = answerData => async dispatch => {\n  try {\n    const {\n      id,\n      noOfAnswers,\n      answerBody,\n      userAnswerd,\n      userId\n    } = answerData;\n    const {\n      data\n    } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswerd, userId);\n    dispatch({\n      type: 'POST_ANSWER',\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.deleteAnswer(id, answerId, noOfAnswers);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const voteQuestion = (id, value, userId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.voteQuestion();\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","askQuestion","questionData","navigate","dispatch","data","postQuestion","type","payload","fetchAllQuestions","error","console","log","getAllQuestions","deleteQuestion","id","postAnswer","answerData","noOfAnswers","answerBody","userAnswerd","userId","deleteAnswer","answerId","voteQuestion","value"],"sources":["C:/Users/Archana/ReactProject/StackOverflowClone/client/src/actions/question.js"],"sourcesContent":["import * as api from '../api'\r\nexport const askQuestion =(questionData, navigate) => async (dispatch)=> {\r\n    try{\r\n        const { data } = await api.postQuestion(questionData)\r\n        dispatch({ type: \"POST_QUESTION\", payload : data})\r\n        dispatch (fetchAllQuestions())\r\n        navigate('/')\r\n    }catch ( error ){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchAllQuestions = () => async (dispatch) => {\r\n    try{\r\n        const { data } = await api.getAllQuestions()\r\n        dispatch ({\r\n            type:'FETCH_ALL_QUESTIONS', payload:data\r\n        })        \r\n    }\r\n    catch (error){\r\n        console.log(error)\r\n    }\r\n}\r\nexport const deleteQuestion = (id , navigate) => async ( dispatch) => {\r\n    try{\r\n        const {data} = await api.deleteQuestion(id)\r\n        dispatch(fetchAllQuestions())\r\n        navigate('/')\r\n    }catch (error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n export const postAnswer = (answerData) => async (dispatch) => {\r\n    try{\r\n        const { id , noOfAnswers, answerBody, userAnswerd, userId} = answerData;\r\n        const {data} = await api.postAnswer(id, noOfAnswers, answerBody, userAnswerd, userId);\r\n        dispatch ({ type:'POST_ANSWER', payload : data});\r\n        dispatch (fetchAllQuestions())\r\n    }\r\n    catch (error){\r\n        console.log(error)\r\n    }\r\n }\r\n\r\n export const deleteAnswer =( id, answerId, noOfAnswers) => async (dispatch) =>{\r\n    try{\r\n        const {data} = await api.deleteAnswer(id, answerId, noOfAnswers)\r\n        dispatch(fetchAllQuestions())\r\n    }catch (error){\r\n        console.log(error)\r\n    }\r\n }\r\n\r\n export const voteQuestion = (id, value, userId) => async (dispatch) =>{\r\n    try{\r\n        const {data} = await api.voteQuestion()\r\n        dispatch(fetchAllQuestions())\r\n    } catch (error){\r\n    console.log(error)\r\n  } \r\n}"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,QAAQ;AAC7B,OAAO,MAAMC,WAAW,GAAEA,CAACC,YAAY,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAI;EACrE,IAAG;IACC,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAML,GAAG,CAACM,YAAY,CAACJ,YAAY,CAAC;IACrDE,QAAQ,CAAC;MAAEG,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAGH;IAAI,CAAC,CAAC;IAClDD,QAAQ,CAAEK,iBAAiB,CAAC,CAAC,CAAC;IAC9BN,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC,QAAQO,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMD,iBAAiB,GAAGA,CAAA,KAAM,MAAOL,QAAQ,IAAK;EACvD,IAAG;IACC,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAML,GAAG,CAACa,eAAe,CAAC,CAAC;IAC5CT,QAAQ,CAAE;MACNG,IAAI,EAAC,qBAAqB;MAAEC,OAAO,EAACH;IACxC,CAAC,CAAC;EACN,CAAC,CACD,OAAOK,KAAK,EAAC;IACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AACD,OAAO,MAAMI,cAAc,GAAGA,CAACC,EAAE,EAAGZ,QAAQ,KAAK,MAAQC,QAAQ,IAAK;EAClE,IAAG;IACC,MAAM;MAACC;IAAI,CAAC,GAAG,MAAML,GAAG,CAACc,cAAc,CAACC,EAAE,CAAC;IAC3CX,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;IAC7BN,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC,QAAOO,KAAK,EAAC;IACVC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAEA,OAAO,MAAMM,UAAU,GAAIC,UAAU,IAAK,MAAOb,QAAQ,IAAK;EAC3D,IAAG;IACC,MAAM;MAAEW,EAAE;MAAGG,WAAW;MAAEC,UAAU;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGJ,UAAU;IACvE,MAAM;MAACZ;IAAI,CAAC,GAAG,MAAML,GAAG,CAACgB,UAAU,CAACD,EAAE,EAAEG,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAEC,MAAM,CAAC;IACrFjB,QAAQ,CAAE;MAAEG,IAAI,EAAC,aAAa;MAAEC,OAAO,EAAGH;IAAI,CAAC,CAAC;IAChDD,QAAQ,CAAEK,iBAAiB,CAAC,CAAC,CAAC;EAClC,CAAC,CACD,OAAOC,KAAK,EAAC;IACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACH,CAAC;AAED,OAAO,MAAMY,YAAY,GAAEA,CAAEP,EAAE,EAAEQ,QAAQ,EAAEL,WAAW,KAAK,MAAOd,QAAQ,IAAI;EAC3E,IAAG;IACC,MAAM;MAACC;IAAI,CAAC,GAAG,MAAML,GAAG,CAACsB,YAAY,CAACP,EAAE,EAAEQ,QAAQ,EAAEL,WAAW,CAAC;IAChEd,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;EACjC,CAAC,QAAOC,KAAK,EAAC;IACVC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACH,CAAC;AAED,OAAO,MAAMc,YAAY,GAAGA,CAACT,EAAE,EAAEU,KAAK,EAAEJ,MAAM,KAAK,MAAOjB,QAAQ,IAAI;EACnE,IAAG;IACC,MAAM;MAACC;IAAI,CAAC,GAAG,MAAML,GAAG,CAACwB,YAAY,CAAC,CAAC;IACvCpB,QAAQ,CAACK,iBAAiB,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOC,KAAK,EAAC;IACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}